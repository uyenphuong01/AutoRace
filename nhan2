// IR Sensors
int sensor1 = 2;      // Left most sensor
int sensor2 = 8;
int sensor3 = 10;
int sensor4 = 12;      // Right most sensor
int sensor5 = 13;

// Initial Values of Sensors
int sensor[5] = {0, 0, 0, 0, 0};

// Motor Variables
int ENA = 3;
int motorInput1 = 4;
int motorInput2 = 5;
int motorInput3 = 6;
int motorInput4 = 7;
int ENB = 9;

//Initial Speed of Motor
int initial_motor_speed = 40;

// Output Pins for Led
int ledPin1 = A3;
int ledPin2 = A4;

// PID Constants
float Kp = 25;
float Ki = 0;
float Kd = 0;
int sum_error = 0;
int maxSpeed = 100;
int left_motor_speed, right_motor_speed;

float error = 0, PID_value;
float previous_error = 0;

int flag = 0;

void setup()
{
  pinMode(sensor1, INPUT);
  pinMode(sensor2, INPUT);
  pinMode(sensor3, INPUT);
  pinMode(sensor4, INPUT);
  pinMode(sensor5, INPUT);

  pinMode(motorInput1, OUTPUT);
  pinMode(motorInput2, OUTPUT);
  pinMode(motorInput3, OUTPUT);
  pinMode(motorInput4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);

  digitalWrite(ledPin1, LOW);
  digitalWrite(ledPin2, LOW);

  Serial.begin(9600);                     //setting serial monitor at a default baund rate of 9600
  delay(500);
  Serial.println("Started !!");
  delay(1000);
}
void loop()
{
  error = read_sensor_values();

  while (error == 103)
  {
  if (error == 0) {
    do {
        forward();
        delay(200);
        read_sensor_values();
    } while (error != 0);
  } else
  if (error == -4) {               // Make left turn untill it detects straight path
    do {
      analogWrite(ENA, 15); //Left Motor Speed
      analogWrite(ENB, 25); //Right Motor Speed
      sharpLeftTurn();
      read_sensor_values();
    } while (error != -4);
  } else 
  if (error == 4) {
    do {          // Make right turn in case of it detects only right path (it will go into forward direction in case of staright and right "|--")                                 // untill it detects straight path.
    analogWrite(ENA, 25); //Left Motor Speed
    analogWrite(ENB, 15); //Right Motor Speed
    sharpRightTurn();
    read_sensor_values(); 
    } while (error != 4);
  } else 
  if (error == -3) {
    do {
      analogWrite(ENA, 10); //Left Motor Speed
      analogWrite(ENB, 15); //Right Motor Speed
      sharpLeftTurn();
      read_sensor_values(); 
    } while (error != -3);
  } else
  if (error == 3) {        // Make left turn untill it detects straight path
    do { 
      analogWrite(ENA, 15); //Left Motor Speed
      analogWrite(ENB, 10); //Right Motor Speed
      sharpRightTurn();
      read_sensor_values();
    } while (error != 0);
  } else 
  if (error == -2) {               // Make left turn untill it detects straight path
    do {
      analogWrite(ENA, 15); //Left Motor Speed
      analogWrite(ENB, 20); //Right Motor Speed
      sharpLeftTurn();
      read_sensor_values();
    } while (error != -2);
  } else 
  if (error == 2) {          // Make right turn in case of it detects only right path (it will go into forward direction in case of staright and right "|--")
    do {                                    // untill it detects straight path.
      analogWrite(ENA, 20); //Left Motor Speed
      analogWrite(ENB, 15); //Right Motor Speed
      sharpRightTurn();
      read_sensor_values();
    } while (error != 2);
  } else 
  if (error == -1) {
    do {
        analogWrite(ENA, 15); //Left Motor Speed
        analogWrite(ENB, 20); //Right Motor Speed
        sharpLeftTurn();
        read_sensor_values();
      } while (error != -1);
  } else 
  if (error == 1) {        // Make left turn untill it detects straight path
    do {
      analogWrite(ENA, 20); //Left Motor Speed
      analogWrite(ENB, 15); //Right Motor Speed
      sharpRightTurn();
      read_sensor_values();
    } while (error != 1);
  } else
  if (error == 102) {
    do {
      reverse();
      delay(200);
      read_sensor_values();
    } while (error != 102);
  }
  read_sensor_values();
  }
  stop_bot();
  delay(2000); 

  // else {
  //   calculate_pid();
  //   motor_control();
  // }
}

float read_sensor_values()
{
  sensor[0] = !digitalRead(sensor1);
  sensor[1] = !digitalRead(sensor2);
  sensor[2] = !digitalRead(sensor3);
  sensor[3] = !digitalRead(sensor4);
  sensor[4] = !digitalRead(sensor5);

  /*
    Serial.print(sensor[0]);
    Serial.print("\t");
    Serial.print(sensor[1]);
    Serial.print("\t");
    Serial.print(sensor[2]);
    Serial.print("\t");
    Serial.println(sensor[3]);*/

  if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 1) && (sensor[4] == 1))
    error = -4;
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 1) && (sensor[4] == 0))
    error = 4;
  else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 1) && (sensor[4] == 1))
    error = -3;
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 0) && (sensor[4] == 0))
    error = 3;
  else if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 1) && (sensor[4] == 1))
    error = -2;
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 0) && (sensor[4] == 1))
    error = 2;
  else if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 1) && (sensor[4] == 1))
    error = -1;
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 0) && (sensor[3] == 0) && (sensor[4] == 1)) // Turn robot left side
    error = 1;
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 0) && (sensor[3] == 1) && (sensor[4] == 1)) // Turn robot right side
    error = 0;
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 1) && (sensor[4] == 1)) // Make U turn
    error = 102;
  else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 0) && (sensor[4] == 0)) // Turn left side or stop
    error = 103;
  Serial.print("error=");
  Serial.println(error);
  return error;
}

void calculate_pid()
{
  // P = error;
  // I = I + previous_I;
  // D = error - previous_error;

  PID_value = (Kp * error) + (Ki * sum_error) + (Kd * error - previous_error);

  
  previous_error = error;
  sum_error += error;
}

void motor_control()
{
  // Calculating the effective motor speed:
  int left_motor_speed = initial_motor_speed + PID_value;
  int right_motor_speed = initial_motor_speed - PID_value;

  if(left_motor_speed > maxSpeed) left_motor_speed = maxSpeed;
  if(right_motor_speed > maxSpeed) right_motor_speed = maxSpeed;

  if(left_motor_speed < -maxSpeed) left_motor_speed = -maxSpeed;
  if(right_motor_speed < -maxSpeed) right_motor_speed = -maxSpeed;

  // The motor speed should not exceed the max PWM value
  // left_motor_speed = constrain(left_motor_speed, 0, 255);
  // right_motor_speed = constrain(right_motor_speed, 0, 255);

  /*Serial.print(PID_value);
    Serial.print("\t");
    Serial.print(left_motor_speed);
    Serial.print("\t");
    Serial.println(right_motor_speed);*/

  analogWrite(ENA, left_motor_speed); //Left Motor Speed
  analogWrite(ENB, right_motor_speed - 30); //Right Motor Speed

  //following lines of code are to make the bot move forward
  forward();
}

void forward()
{
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, HIGH);
  digitalWrite(motorInput3, LOW);
  digitalWrite(motorInput4, HIGH);
}
void reverse()
{
  /*The pin numbers and high, low values might be different depending on your connections */
   
  digitalWrite(motorInput1, HIGH);
  digitalWrite(motorInput2, LOW);
  digitalWrite(motorInput3, HIGH);
  digitalWrite(motorInput4, LOW);
}
void right()
{
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, HIGH);
  digitalWrite(motorInput3, LOW);
  digitalWrite(motorInput4, HIGH);
}
void left()
{
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, HIGH);
  digitalWrite(motorInput3, LOW);
  digitalWrite(motorInput4, HIGH);
}
void sharpRightTurn() {
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, HIGH);
  digitalWrite(motorInput3, LOW);
  digitalWrite(motorInput4, HIGH);
}
void sharpLeftTurn() {
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, HIGH);
  digitalWrite(motorInput3, LOW);
  digitalWrite(motorInput4, HIGH);
}
void stop_bot()
{
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, LOW);
  digitalWrite(motorInput3, LOW);
  digitalWrite(motorInput4, LOW);
}
