#define tocdo 100
// IR Sensors
int sensor1 = 2;      // Leftmost sensor
int sensor2 = 8;
int sensor3 = 10;
int sensor4 = 12;      // Rightmost sensor
int sensor5 = 13;


// Initial Values of Sensors
int sensor[5] = {0, 0, 0, 0, 0};

// Motor Variables
int ENA = 3;
int motorInput1 = 4;
int motorInput2 = 5;
int motorInput3 = 6;
int motorInput4 = 7;
int ENB = 9;

// Initial Speed of Motor
int initial_motor_speed = 30;

// Output Pins for LED
int ledPin1 = A3;
int ledPin2 = A4;

// PID Constants
float Kp = 25;
float Ki = 0;
float Kd = 0;
int sum_error = 0;
int maxSpeed = 100;
float left_motor_speed, right_motor_speed;

float error = 0, PID_value;
float previous_error = 0;

int flag = 0;

void setup()
{
  pinMode(sensor1, INPUT);
  pinMode(sensor2, INPUT);
  pinMode(sensor3, INPUT);
  pinMode(sensor4, INPUT);
  pinMode(sensor5, INPUT);

  pinMode(motorInput1, OUTPUT);
  pinMode(motorInput2, OUTPUT);
  pinMode(motorInput3, OUTPUT);
  pinMode(motorInput4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);

  digitalWrite(ledPin1, LOW);
  digitalWrite(ledPin2, LOW);

  Serial.begin(9600);                     // Setting serial monitor at a default baud rate of 9600
  delay(500);
  Serial.println("Started !!");
  delay(1000);
}

void loop() {
  read_sensor_values();
  bamline(error);  // Corrected: pass the result of read_sensor_values() to bamline()
}
void bamline(float error)  // Corrected: changed the parameter type to float
{
  switch (int(error))  // Corrected: error is a float, cast it to int for the switch statement
  {
    case 103: case103(); break;
    case 102: case102(); break;
    case 1: case1(); break;
    case 2: case2(); break;
    case 3: case3(); break;
    case 4: case4(); break;
    case 0: case0(); break;
    case -1: caseam1(); break;
    case -2: caseam2(); break;
    case -3: caseam3(); break;
    case -4: caseam4(); break;
  }
}
void case103(){
  analogWrite(ENA, tocdo-50);
  analogWrite(ENB, tocdo-50);
  reverse();  // Corrected: added the missing semicolon
  delay(100);
}
void case102(){
  stop_bot();
}
void case1(){
  analogWrite(ENA,50);//trai
  analogWrite(ENB,50);//phai
  right();
}
void case2(){
  analogWrite(ENA,50);//trai
  analogWrite(ENB,50);//phai
  right();
}
void case3(){
  analogWrite(ENA,50);//trai
  analogWrite(ENB,50);//phai
  right();
}
void case4(){
  analogWrite(ENA,60);//trai
  analogWrite(ENB,60);//phai
  right();
}
void case0(){
  analogWrite(ENA,tocdo);//trai
  analogWrite(ENB,tocdo);//phai
  forward();
}
void caseam1(){
  analogWrite(ENA,50);//trai
  analogWrite(ENB,50);//phai
  left();
} 
void caseam2(){
  analogWrite(ENA,50);//trai
  analogWrite(ENB,50);//phai
  left();
}
void caseam3(){
  analogWrite(ENA,50);//trai
  analogWrite(ENB,50);//phai
  left();
}  
void caseam4(){
  analogWrite(ENA,60);//trai
  analogWrite(ENB,60);//phai
  left();
}  



float read_sensor_values() {
sensor[0] = digitalRead(sensor1);
sensor[1] = digitalRead(sensor2);
sensor[2] = digitalRead(sensor3);
sensor[3] = digitalRead(sensor4);
sensor[4] = digitalRead(sensor5);

  Serial.print(sensor[0]);
  Serial.print("\t");
  Serial.print(sensor[1]);
  Serial.print("\t");
  Serial.print(sensor[2]);
  Serial.print("\t");
  Serial.print(sensor[3]);
  Serial.print("\t");
  Serial.println(sensor[4]);
  if ((sensor[0] == 0) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 1) && sensor[4] == 1)  // lệch phải nhiều
    error = -4;

  else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 1) && sensor[4] == 1)  // lệch phải nhiều
    error = -3;

  else if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 1) && (sensor[3] == 1) && sensor[4] == 1)
    error = -2;

  else if ((sensor[0] == 1) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 1) && sensor[4] == 1)
    error = -1;

  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 0) && (sensor[3] == 1) && sensor[4] == 1)
    error = 0;

  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 0) && (sensor[3] == 0) && sensor[4] == 1)
    error = 1;

  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 0) && sensor[4] == 1)
    error = 2;

  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 0) && sensor[4] == 0)
    error = 3;

  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1) && sensor[3] == 1 && sensor[4] == 0)  // lệch trais nhiều
    error = 4;
  else if ((sensor[0] == 1) && (sensor[1] == 1) && (sensor[2] == 1) && (sensor[3] == 1) && sensor[4] == 1)  // Make U turn
    error = 103; 

  else if ((sensor[0] == 0) && (sensor[1] == 0) && (sensor[2] == 0) && (sensor[3] == 0) && sensor[4] == 0)  // stop
    error = 102;
  Serial.print("error=");
  Serial.println(error);
  return error;
}

void calculate_pid()
{
// P = error;
// I = I + previous_I;
// D = error - previous_error;

PID_value = (Kp * error) + (Ki * sum_error) + (Kd * (error - previous_error));

previous_error = error;
sum_error += error;
}

void motor_control()
{
// Calculating the effective motor speed:
left_motor_speed = initial_motor_speed + PID_value;
right_motor_speed = initial_motor_speed - PID_value;

if (left_motor_speed > maxSpeed) left_motor_speed = maxSpeed;
if (right_motor_speed > maxSpeed) right_motor_speed = maxSpeed;

if (left_motor_speed < -maxSpeed) left_motor_speed = -maxSpeed;
if (right_motor_speed < -maxSpeed) right_motor_speed = -maxSpeed;

analogWrite(ENA, left_motor_speed); // Left Motor Speed
analogWrite(ENB, right_motor_speed - 30); // Right Motor Speed

forward(); // Move forward
}

void reverse()
{
digitalWrite(motorInput1, LOW);
digitalWrite(motorInput2, HIGH);
digitalWrite(motorInput3, LOW);
digitalWrite(motorInput4, HIGH);
}

void forward()
{
digitalWrite(motorInput1, HIGH);
digitalWrite(motorInput2, LOW);
digitalWrite(motorInput3, HIGH);
digitalWrite(motorInput4, LOW);
}

void right()
{
digitalWrite(motorInput1, LOW);
digitalWrite(motorInput2, HIGH);
digitalWrite(motorInput3, LOW);
digitalWrite(motorInput4, LOW);
}

void left()
{
digitalWrite(motorInput1, LOW);
digitalWrite(motorInput2, LOW);
digitalWrite(motorInput3, LOW);
digitalWrite(motorInput4, HIGH);
}
void sharpRightTurn() {
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, HIGH);
  digitalWrite(motorInput2, LOW);
  digitalWrite(motorInput3, LOW);
  digitalWrite(motorInput4, HIGH);
}
void sharpLeftTurn() {     //Quay phai --> Phai lui, trai toi
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, HIGH);
  digitalWrite(motorInput3, HIGH);
  digitalWrite(motorInput4, LOW);
}
void stop_bot() {
  /*The pin numbers and high, low values might be different depending on your connections */
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, LOW);
  digitalWrite(motorInput3, LOW);
  digitalWrite(motorInput4, LOW);
}
